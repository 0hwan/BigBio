1
00:00:00,180 --> 00:00:02,735
그래서, 이 작은 머신은 무엇과
비슷하게 보여지나요?
So, what does this little
machine look like?

2
00:00:02,735 --> 00:00:06,689
기억을 상기해보자. 우리는 RNNs이 더 많은 것을 
기억하는것을 돕기 위한 것을 하고 있습니다.
Remember, we're doing this to help RNNs
memorize things better.

3
00:00:06,689 --> 00:00:09,780
그래서, 잠시만 neural networks에
대한 것을 잊기로 하자.
So let's forget about neural
networks for just a moment.

4
00:00:10,810 --> 00:00:13,640
당신은 기억을 가지고 있는 시스템을 
원한다고 상상해보자.
Imagine that you want
a system to have memory.

5
00:00:13,640 --> 00:00:15,440
당신은 세가지가 필요할 것이다.
You need to do three things.

6
00:00:15,440 --> 00:00:18,640
첫번째로, 데이터를 메모리에 쓰는것이 필요하다.
First, you need to write
the data into the memory.

7
00:00:18,640 --> 00:00:21,430
다시 읽기도 필요할 것이고,
Then you will be able to read it back,
and

8
00:00:21,430 --> 00:00:24,080
데이터를 지우는 것도 원할 것이다.
then you also want to be
able to erase it, or forget.

9
00:00:25,470 --> 00:00:30,030
여기에는 메모리에 쓰는 하나의 방법입니다.
그림과 같은 간단한 아이디어입니다.
Here is one way to write this
very same idea down as a diagram.

10
00:00:30,030 --> 00:00:34,410
당신은 메모리를 가지고 있고,
메모리에는 아마도 행렬값입니다.
You have a memory,
which is maybe a matrix of values.

11
00:00:34,410 --> 00:00:39,027
당신은 메모리로 들어가는 입력값과
작은 명령어를 가지고 있습니다.
You also have inputs coming into
the memory, and a little instruction

12
00:00:39,027 --> 00:00:43,556
gate는 입력값을 쓸지 그렇지 않을지를 알려줍니다.
gate that tells whether you are going
to write to that memory or not.

13
00:00:43,556 --> 00:00:46,330
당신은 또한 다른 gate을 가지고 있으며,
You also have another gate that's

14
00:00:46,330 --> 00:00:49,424
그것은 메모리로부터 읽어올지 그렇지 않을지를 알려줍니다.
says whether you are going to able
to read from that memory or not.

15
00:00:49,424 --> 00:00:55,890
그리고 마지막 gate는 데이터를 잊을지 
또는 다시 쓸지를 알려줍니다.
And then you have one final gate that
says forget the data or write it back.